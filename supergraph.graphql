schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type Account
  @join__owner(graph: ACCOUNTS)
  @join__type(graph: ACCOUNTS, key: "_id")
  @join__type(graph: PAYWALLS, key: "_id")
  @join__type(graph: USERS, key: "_id")
{
  _id: ObjectID! @join__field(graph: ACCOUNTS)
  activation: Activation @join__field(graph: ACCOUNTS)
  createdAt: DateTime! @join__field(graph: ACCOUNTS)
  email: String! @join__field(graph: ACCOUNTS)
  password: String @join__field(graph: ACCOUNTS)
  updatedAt: DateTime! @join__field(graph: ACCOUNTS)
  users(getUsersInput: GetUsersInput!): GetUsersResponse! @join__field(graph: USERS, requires: "_id email")
}

type Activation {
  code: String
  limit: DateTime!
  verified: Boolean!
}

type Address {
  city: String!
  lineOne: String!
  lineTwo: String
  state: String!
  zip: String!
}

input AddressInput {
  city: String!
  lineOne: String!
  lineTwo: String
  state: String!
  zip: String!
}

enum ArrayFilterByEnum {
  IN
  NIN
}

"""Filter for documents which have a property that is a Boolean."""
input BooleanFieldFilter {
  bool: Boolean!
  filterBy: BooleanFilterByEnum!
  groups: [String!]
  operator: OperatorFieldConfigEnum
}

"""Equal or Not Equal"""
enum BooleanFilterByEnum {
  EQ
  NE
}

input CreatePaywallInput {
  description: String!
  product_id: ID!
  status: PaywallStatusEnum
}

input CreatePaywallPurchaseInput {
  account: ObjectID
  paywall: ObjectID!
  status: PaywallPurchaseStatusEnum!
}

input CreateServiceInput {
  limits: [PaywallLimitInput!]!
  name: String!
  webhook: String
}

"""Filter for documents which have a property that is a Date."""
input DateFieldFilter {
  date: DateTime!
  filterBy: DateFilterByEnum!
  groups: [String!]
  operator: OperatorFieldConfigEnum
}

enum DateFilterByEnum {
  EQ
  GT
  GTE
  LT
  LTE
  NE
}

scalar DateTime

input DeleteMediaInput {
  _ids: [ObjectID!]!
}

type DeleteMediaResponse {
  deletedCount: Int!
}

input DeleteUserInput {
  _id: ObjectID!
}

"""Global configuration details."""
input FilterConfig {
  pagination: Pagination
}

input GetAccountsActivationInput {
  verified: [BooleanFieldFilter!]!
}

input GetAccountsInput {
  _id: [StringFieldFilter]
  activation: GetAccountsActivationInput
  config: FilterConfig
  createdAt: [DateFieldFilter]
  email: [StringFieldFilter]
  updatedAt: [DateFieldFilter]
}

type GetAccountsResponse {
  data: [Account!]!
  stats: Stats!
}

input GetMediaInput {
  _id: [StringFieldFilter]
  config: FilterConfig
  createdAt: [DateFieldFilter]
  created_by: [StringFieldFilter]
  mimetype: [StringFieldFilter]
  path: [StringFieldFilter]
  title: [StringFieldFilter]
  updatedAt: [DateFieldFilter]
}

type GetMediaResponse {
  data: [Media!]!
  stats: Stats!
}

input GetPaywallPurchasesInput {
  _id: StringFieldFilter
  account: StringFieldFilter
  config: FilterConfig
  createdAt: StringFieldFilter
  created_by: StringFieldFilter
  paywall: StringFieldFilter
  status: StringFieldFilter
  updatedAt: StringFieldFilter
}

type GetPaywallPurchasesResponse {
  data: [PaywallPurchase!]!
  stats: Stats!
}

input GetPaywallsInput {
  _id: StringFieldFilter
  config: FilterConfig
  createdAt: StringFieldFilter
  created_by: StringFieldFilter
  productId: StringFieldFilter
  status: StringFieldFilter
  updatedAt: StringFieldFilter
}

type GetPaywallsResponse {
  data: [Paywall!]!
  stats: Stats!
}

input GetServicesInput {
  _id: StringFieldFilter
  config: FilterConfig
  createdAt: StringFieldFilter
  created_by: StringFieldFilter
  name: StringFieldFilter
  updatedAt: StringFieldFilter
}

type GetServicesResponse {
  data: [Service!]!
  stats: Stats!
}

input GetUserByMembershipInput {
  _id: StringFieldFilter
  account: StringFieldFilter
  createdAt: DateFieldFilter
  role: [IntFieldFilter]
  status: [StringFieldFilter]
  updatedAt: DateFieldFilter
}

input GetUsersInput {
  _id: [StringFieldFilter]
  config: FilterConfig
  createdAt: [DateFieldFilter]
  created_by: [StringFieldFilter]
  email: [StringFieldFilter]
  first_name: [StringFieldFilter]
  image: [StringFieldFilter]
  last_name: [StringFieldFilter]
  memberships: [GetUserByMembershipInput]
  phone: [StringFieldFilter]
  updatedAt: [DateFieldFilter]
}

type GetUsersResponse {
  data: [User!]!
  stats: Stats!
}

"""Filter for documents which have a property that is an Integer."""
input IntFieldFilter {
  filterBy: IntFilterByEnum!
  groups: [String!]
  int: Int!
  operator: OperatorFieldConfigEnum
}

enum IntFilterByEnum {
  EQ
  GT
  GTE
  LT
  LTE
  NE
}

input InviteUserInput {
  email: String!
  local: LocalMembershipInput
  role: Int
}

type Limit {
  name: String!
  scopes: [Scope!]!
}

input LocalMembershipInput {
  about: String
  address: AddressInput
  first_name: String
  image: ObjectID
  last_name: String
  phone: String
}

type LocalUserDetails {
  about: String
  address: Address
  first_name: String
  image: Media
  last_name: String
  phone: String
}

type LoginAccountResponse {
  account: Account!
  token: String!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginUserResponse {
  token: String!
  user: User!
}

type Media
  @join__owner(graph: MEIDA)
  @join__type(graph: MEIDA, key: "_id")
  @join__type(graph: USERS, key: "_id")
{
  _id: ObjectID! @join__field(graph: MEIDA)
  createdAt: DateTime! @join__field(graph: MEIDA)
  created_by: User! @join__field(graph: MEIDA)
  mimetype: String! @join__field(graph: MEIDA)
  path: String! @join__field(graph: MEIDA)
  title: String! @join__field(graph: MEIDA)
  updatedAt: DateTime! @join__field(graph: MEIDA)
}

type Membership {
  _id: ObjectID!
  account: Account!
  createdAt: DateTime!
  created_by: User!
  default: Boolean!
  local: LocalUserDetails
  role: Int!
  status: MembershipStatusEnum
  updatedAt: DateTime!
}

input MembershipInput {
  account: ObjectID!
  default: Boolean
  local: LocalMembershipInput
  role: Int
  status: MembershipStatusEnum
}

enum MembershipStatusEnum {
  ACTIVE
  INACTIVE
  PENDING
  REVOKED
}

type Mutation {
  createPaywall(createPaywallInput: CreatePaywallInput!): Paywall! @join__field(graph: PAYWALLS)
  createPaywallPurchase(createPaywallPurchaseInput: CreatePaywallPurchaseInput!): PaywallPurchase! @join__field(graph: PAYWALLS)
  createService(createServiceInput: CreateServiceInput!): Service! @join__field(graph: PAYWALLS)
  deleteMedia(deleteMediaInput: DeleteMediaInput!): DeleteMediaResponse! @join__field(graph: MEIDA)
  deleteUser(deleteUserInput: DeleteUserInput!): User! @join__field(graph: USERS)
  inviteUser(inviteUserInput: InviteUserInput!): User! @join__field(graph: USERS)
  login(loginInput: LoginInput!): LoginAccountResponse! @join__field(graph: ACCOUNTS)
  loginUser: LoginUserResponse! @join__field(graph: USERS)
  register(registerInput: RegisterInput!): Account! @join__field(graph: ACCOUNTS)
  resetActivationCode(resetCodeInput: ResetCodeInput!): Account! @join__field(graph: ACCOUNTS)
  resetPassword(resetInput: ResetPasswordInput!): Account! @join__field(graph: ACCOUNTS)
  singleFileUpload(singleFileUploadInput: SingleFileUploadInput!): Media! @join__field(graph: MEIDA)
  switchUserMembership(switchUserMembershipInput: SwitchUserMembershipInput!): LoginUserResponse! @join__field(graph: USERS)
  updateEmail(updateEmailInput: UpdateEmailInput!): Account! @join__field(graph: ACCOUNTS)
  updatePaywall(updatePaywallInput: UpdatePaywallInput!): Paywall! @join__field(graph: PAYWALLS)
  updatePaywallPurchase(updatePaywallPurchaseInput: UpdatePaywallPurchaseInput!): PaywallPurchase! @join__field(graph: PAYWALLS)
  updateService(updateServiceInput: UpdateServiceInput!): Service! @join__field(graph: PAYWALLS)
  updateUser(updateUserInput: UpdateUserInput!): User! @join__field(graph: USERS)
  verifyEmail(verifyEmailInput: VerifyEmailInput!): Account! @join__field(graph: ACCOUNTS)
}

scalar ObjectID

enum OperatorFieldConfigEnum {
  AND
  OR
}

input Pagination {
  createdAt: DateTime
  limit: Int
  reverse: Boolean
}

type Paywall
  @join__owner(graph: PAYWALLS)
  @join__type(graph: PAYWALLS, key: "_id")
{
  _id: ObjectID! @join__field(graph: PAYWALLS)
  createdAt: DateTime! @join__field(graph: PAYWALLS)
  created_by: User! @join__field(graph: PAYWALLS)
  description: String! @join__field(graph: PAYWALLS)
  product_id: ID! @join__field(graph: PAYWALLS)
  status: PaywallStatusEnum! @join__field(graph: PAYWALLS)
  updatedAt: DateTime! @join__field(graph: PAYWALLS)
}

input PaywallLimitInput {
  name: String!
  scopes: [ScopeInput!]!
}

type PaywallPurchase {
  _id: ObjectID!
  account: Account!
  createdAt: DateTime!
  created_by: User!
  paywall: Paywall!
  status: PaywallPurchaseStatusEnum!
  updatedAt: DateTime!
}

enum PaywallPurchaseStatusEnum {
  ACTIVE
  CREATED
  INACTIVE
  PAYMENT_DECLINED
  PAYMENT_PENDING
  TERMINATED
}

enum PaywallStatusEnum {
  ACTIVE
  INACTIVE
}

type Query {
  getAccounts(getAccountsInput: GetAccountsInput!): GetAccountsResponse! @join__field(graph: ACCOUNTS)
  getMedia(getMediaInput: GetMediaInput!): GetMediaResponse! @join__field(graph: MEIDA)
  getMyAccount: Account! @join__field(graph: ACCOUNTS)
  getPaywallPurchases(getPaywallPurchasesInput: GetPaywallPurchasesInput!): GetPaywallPurchasesResponse! @join__field(graph: PAYWALLS)
  getPaywalls(getPaywallsInput: GetPaywallsInput!): GetPaywallsResponse! @join__field(graph: PAYWALLS)
  getServices(getServicesInput: GetServicesInput!): GetServicesResponse! @join__field(graph: PAYWALLS)
  getUsers(getUsersInput: GetUsersInput!): GetUsersResponse! @join__field(graph: USERS)
  isAuthenticated: Boolean! @join__field(graph: ACCOUNTS)
  me: User! @join__field(graph: USERS)
}

input RegisterInput {
  email: String!
  password: String!
  password2: String!
}

input ResetCodeInput {
  email: String!
}

input ResetPasswordInput {
  code: String!
  email: String!
  password: String!
  password2: String!
}

type Scope {
  paywall: Paywall!
  quantity: Int!
}

input ScopeInput {
  paywall: ObjectID!
  quantity: Int!
}

type Service {
  _id: ObjectID!
  createdAt: DateTime!
  created_by: User!
  limits: [Limit!]!
  name: String!
  updatedAt: DateTime!
  webhook: String
}

input SingleFileUploadInput {
  file: Upload!
  title: String!
}

type Stats {
  cursor: DateTime
  page: Int
  remaining: Int
  total: Int
}

"""
Filter for documents which have a property that is an array of strings..
"""
input StringArrayFieldFilter {
  arrayOptions: ArrayFilterByEnum!
  filterBy: StringFilterByEnum!
  groups: [String!]
  operator: OperatorFieldConfigEnum
  string: [String!]!
}

"""
Filter for documents which have a property that is a string. Filter by REGEX, ObjectID, or Match.
"""
input StringFieldFilter {
  filterBy: StringFilterByEnum!
  groups: [String!]
  operator: OperatorFieldConfigEnum
  string: String!
}

enum StringFilterByEnum {
  MATCH
  OBJECTID
  REGEX
}

input SwitchUserMembershipInput {
  membership_id: ObjectID!
}

input UpdateEmailInput {
  email: String!
}

input UpdatePaywallInput {
  description: String
  paywall: GetPaywallsInput!
  product_id: ID
  status: PaywallStatusEnum
}

input UpdatePaywallPurchaseInput {
  account: ObjectID
  paywallPurchase: GetPaywallPurchasesInput!
  status: PaywallPurchaseStatusEnum
}

input UpdateServiceInput {
  limits: [PaywallLimitInput!]
  name: String
  service: GetServicesInput!
  webhook: String
}

input UpdateUserInput {
  about: String
  address: AddressInput
  email: String
  first_name: String
  image: ObjectID
  last_name: String
  memberships: MembershipInput
  phone: String
  user: GetUsersInput!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User
  @join__owner(graph: USERS)
  @join__type(graph: USERS, key: "_id")
  @join__type(graph: MEIDA, key: "_id")
  @join__type(graph: PAYWALLS, key: "_id")
{
  _id: ObjectID! @join__field(graph: USERS)
  about: String @join__field(graph: USERS)
  address: Address @join__field(graph: USERS)
  createdAt: DateTime! @join__field(graph: USERS)
  created_by: User @join__field(graph: USERS)
  email: String! @join__field(graph: USERS)
  first_name: String @join__field(graph: USERS)
  image: Media @join__field(graph: USERS)
  last_name: String @join__field(graph: USERS)
  memberships: [Membership!]! @join__field(graph: USERS)
  phone: String @join__field(graph: USERS)
  updatedAt: DateTime! @join__field(graph: USERS)
}

input VerifyEmailInput {
  code: String!
  email: String!
}

type VerifyEmailResponse {
  message: String!
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  ACCOUNTS @join__graph(name: "accounts" url: "http://localhost:5001")
  MEIDA @join__graph(name: "meida" url: "http://localhost:5006/graphql")
  PAYWALLS @join__graph(name: "paywalls" url: "http://localhost:5010/graphql")
  USERS @join__graph(name: "users" url: "http://localhost:5002")
}
