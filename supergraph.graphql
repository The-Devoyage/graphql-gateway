schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type Account
  @join__owner(graph: ACCOUNTS)
  @join__type(graph: ACCOUNTS, key: "_id")
{
  _id: ObjectID! @join__field(graph: ACCOUNTS)
  activation: Activation @join__field(graph: ACCOUNTS)
  createdAt: DateTime! @join__field(graph: ACCOUNTS)
  email: String! @join__field(graph: ACCOUNTS)
  password: String @join__field(graph: ACCOUNTS)
  updatedAt: DateTime! @join__field(graph: ACCOUNTS)
}

type Activation {
  code: String
  limit: DateTime!
  verified: Boolean!
}

enum ArrayFilterByEnum {
  IN
  NIN
}

input BooleanArrayFilter {
  arrayOptions: ArrayFilterByEnum!
  bool: Boolean!
  filterBy: BooleanFilterByEnum!
}

input BooleanFieldFilter {
  bool: Boolean!
  filterBy: BooleanFilterByEnum!
}

enum BooleanFilterByEnum {
  EQ
  NE
}

scalar DateTime

input FilterConfig {
  operator: OperatorFieldConfigEnum
  pagination: Pagination
}

input GetAccountsActivationInput {
  verified: BooleanFieldFilter!
}

input GetAccountsInput {
  _id: StringFieldFilter
  activation: GetAccountsActivationInput
  config: FilterConfig
  email: StringFieldFilter
}

type GetAccountsResponse {
  data: [Account!]
  stats: Stats
}

input IntArrayFilter {
  arrayOptions: ArrayFilterByEnum!
  filterBy: IntFilterByEnum!
  int: Int!
}

input IntFieldFilter {
  filterBy: IntFilterByEnum!
  int: Int!
}

enum IntFilterByEnum {
  EQ
  GT
  GTE
  LT
  LTE
  NE
}

type LoginAccountResponse {
  account: Account!
  token: String!
}

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  login(loginInput: LoginInput!): LoginAccountResponse! @join__field(graph: ACCOUNTS)
  register(registerInput: RegisterInput!): Account! @join__field(graph: ACCOUNTS)
  resetActivationCode(resetCodeInput: ResetCodeInput!): Account! @join__field(graph: ACCOUNTS)
  resetPassword(resetInput: ResetPasswordInput!): Account! @join__field(graph: ACCOUNTS)
  updateEmail(updateEmailInput: UpdateEmailInput!): Account! @join__field(graph: ACCOUNTS)
  verifyEmail(verifyEmailInput: VerifyEmailInput!): Account! @join__field(graph: ACCOUNTS)
}

scalar ObjectID

enum OperatorFieldConfigEnum {
  AND
  OR
}

input Pagination {
  createdAt: DateTime
  limit: Int
  reverse: Boolean
}

type Query {
  getAccounts(getAccountsInput: GetAccountsInput!): GetAccountsResponse! @join__field(graph: ACCOUNTS)
  getMyAccount: Account! @join__field(graph: ACCOUNTS)
  isAuthenticated: Boolean! @join__field(graph: ACCOUNTS)
}

input RegisterInput {
  email: String!
  password: String!
  password2: String!
}

input ResetCodeInput {
  email: String!
}

input ResetPasswordInput {
  code: String!
  email: String!
  password: String!
  password2: String!
}

type Stats {
  cursor: DateTime
  page: Int
  remaining: Int
  total: Int
}

input StringArrayFilter {
  arrayOptions: ArrayFilterByEnum!
  filterBy: StringFilterByEnum!
  string: [String!]!
}

input StringFieldFilter {
  filterBy: StringFilterByEnum!
  string: String!
}

enum StringFilterByEnum {
  MATCH
  OBJECTID
  REGEX
}

input UpdateEmailInput {
  email: String!
}

input VerifyEmailInput {
  code: String!
  email: String!
}

type VerifyEmailResponse {
  message: String!
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  ACCOUNTS @join__graph(name: "accounts" url: "http://localhost:5001")
}
