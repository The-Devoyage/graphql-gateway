schema
  @core(feature: "https://specs.apollo.dev/core/v0.2"),
  @core(feature: "https://specs.apollo.dev/join/v0.1", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @core(as: String, feature: String!, for: core__Purpose) repeatable on SCHEMA

directive @join__field(graph: join__Graph, provides: join__FieldSet, requires: join__FieldSet) on FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__owner(graph: join__Graph!) on INTERFACE | OBJECT

directive @join__type(graph: join__Graph!, key: join__FieldSet) repeatable on INTERFACE | OBJECT

type Account
  @join__owner(graph: ACCOUNTS)
  @join__type(graph: ACCOUNTS, key: "_id")
  @join__type(graph: USERS, key: "_id")
{
  _id: ObjectID! @join__field(graph: ACCOUNTS)
  activation: Activation @join__field(graph: ACCOUNTS)
  createdAt: DateTime! @join__field(graph: ACCOUNTS)
  email: String! @join__field(graph: ACCOUNTS)
  loginUser(loginUserInput: LoginUserInput): LoginUserResponse @join__field(graph: USERS, requires: "_id email")
  password: String @join__field(graph: ACCOUNTS)
  updatedAt: DateTime! @join__field(graph: ACCOUNTS)
  users(getUsersInput: GetUsersInput!): GetUsersResponse @join__field(graph: USERS)
}

type Activation {
  code: String
  limit: DateTime!
  verified: Boolean!
}

type Address {
  city: String!
  lineOne: String!
  lineTwo: String
  state: String!
  zip: String!
}

input AddressInput {
  city: String!
  lineOne: String!
  lineTwo: String
  state: String!
  zip: String!
}

enum ArrayFilterByEnum {
  IN
  NIN
}

input BooleanArrayFilter {
  arrayOptions: ArrayFilterByEnum!
  bool: Boolean!
  filterBy: BooleanFilterByEnum!
}

input BooleanFieldFilter {
  bool: Boolean!
  filterBy: BooleanFilterByEnum!
}

enum BooleanFilterByEnum {
  EQ
  NE
}

type CompositionDetail {
  trigger: String!
  variables: [String]
}

type Content {
  _id: ObjectID!
  active: Boolean!
  createdAt: DateTime!
  created_by: ObjectID!
  html: String!
  layout: Layout
  name: String!
  plainText: String!
  subject: String!
  trigger: String!
  updatedAt: DateTime!
  variables: [String]
}

input CreateContentInput {
  active: Boolean!
  html: String!
  name: String!
  plainText: String!
  subject: String!
  trigger: String!
}

input CreateLayoutInput {
  html: String!
  name: String!
}

input CreateMediaInput {
  title: String!
  type: String!
}

input CreateUserInput {
  account: ID
  email: String!
  first_name: String
  last_name: String
  phone: String
  profile_img: ID
}

scalar DateTime

input DeleteContentInput {
  _id: ObjectID!
}

input DeleteLayoutInput {
  _id: ObjectID!
}

input DeleteUserInput {
  _id: ObjectID!
}

input FilterConfig {
  operator: OperatorFieldConfigEnum
  pagination: Pagination
}

input GetAccountsActivationInput {
  verified: BooleanFieldFilter!
}

input GetAccountsInput {
  _id: StringFieldFilter
  activation: GetAccountsActivationInput
  config: FilterConfig
  email: StringFieldFilter
}

type GetAccountsResponse {
  data: [Account!]
  stats: Stats
}

input GetContentsInput {
  _id: StringFieldFilter
  active: BooleanFieldFilter
  config: FilterConfig
  createdAt: StringFieldFilter
  created_by: StringFieldFilter
  html: StringFieldFilter
  name: StringFieldFilter
  plainText: StringFieldFilter
  subject: StringFieldFilter
  trigger: StringFieldFilter
  updatedAt: StringFieldFilter
}

type GetContentsResponse {
  data: [Content]
  stats: Stats
}

input GetLayoutsInput {
  _id: StringFieldFilter
  config: FilterConfig
  createdAt: StringFieldFilter
  created_by: StringFieldFilter
  html: StringFieldFilter
  name: StringFieldFilter
  updatedAt: StringFieldFilter
}

type GetLayoutsResponse {
  data: [Layout]
  stats: Stats
}

input GetMediaInput {
  _id: StringFieldFilter
  config: FilterConfig
  createdAt: StringFieldFilter
  created_by: StringFieldFilter
  mimetype: StringFieldFilter
  path: StringFieldFilter
  title: StringFieldFilter
  updatedAt: StringFieldFilter
}

type GetMediaResponse {
  data: [Media]
  stats: Stats
}

input GetUsersInput {
  _id: StringFieldFilter
  account: StringArrayFilter
  config: FilterConfig
  created_by: StringFieldFilter
  email: StringFieldFilter
  first_name: StringFieldFilter
  image: StringFieldFilter
  last_name: StringFieldFilter
  phone: StringFieldFilter
}

type GetUsersResponse {
  data: [User]
  stats: Stats
}

input IntArrayFilter {
  arrayOptions: ArrayFilterByEnum!
  filterBy: IntFilterByEnum!
  int: Int!
}

input IntFieldFilter {
  filterBy: IntFilterByEnum!
  int: Int!
}

enum IntFilterByEnum {
  EQ
  GT
  GTE
  LT
  LTE
  NE
}

type Layout {
  _id: ObjectID!
  createdAt: DateTime!
  created_by: ObjectID!
  html: String!
  name: String!
  updatedAt: DateTime!
}

type LoginAccountResponse {
  account: Account!
  token: String!
}

input LoginInput {
  email: String!
  password: String!
}

input LoginUserCredentialsInput {
  email: String!
  password: String!
}

input LoginUserInput {
  _id: ObjectID!
  credentials: LoginUserCredentialsInput
}

type LoginUserResponse {
  token: String!
  user: User!
}

type Media
  @join__owner(graph: MEIDA)
  @join__type(graph: MEIDA, key: "_id")
  @join__type(graph: USERS, key: "_id")
{
  _id: ObjectID! @join__field(graph: MEIDA)
  createdAt: String! @join__field(graph: MEIDA)
  created_by: User! @join__field(graph: MEIDA)
  mimetype: String! @join__field(graph: MEIDA)
  path: String! @join__field(graph: MEIDA)
  title: String! @join__field(graph: MEIDA)
  updatedAt: String! @join__field(graph: MEIDA)
}

type Mutation {
  createContent(createContentInput: CreateContentInput!): Content! @join__field(graph: MAILER)
  createLayout(createLayoutInput: CreateLayoutInput!): Layout! @join__field(graph: MAILER)
  createUser(createUserInput: CreateUserInput!): User! @join__field(graph: USERS)
  deleteContent(deleteContentInput: DeleteContentInput!): Content! @join__field(graph: MAILER)
  deleteLayout(deleteLayoutInput: DeleteLayoutInput!): Layout! @join__field(graph: MAILER)
  deleteUser(deleteUserInput: DeleteUserInput!): User! @join__field(graph: USERS)
  login(loginInput: LoginInput!): LoginAccountResponse! @join__field(graph: ACCOUNTS)
  loginUser(loginUserInput: LoginUserInput!): LoginUserResponse! @join__field(graph: USERS)
  register(registerInput: RegisterInput!): Account! @join__field(graph: ACCOUNTS)
  resetActivationCode(resetCodeInput: ResetCodeInput!): Account! @join__field(graph: ACCOUNTS)
  resetPassword(resetInput: ResetPasswordInput!): Account! @join__field(graph: ACCOUNTS)
  singleFileUpload(singleFileUploadInput: SingleFileUploadInput!): Media! @join__field(graph: MEIDA)
  updateContent(updateContentInput: UpdateContentInput!): Content! @join__field(graph: MAILER)
  updateEmail(updateEmailInput: UpdateEmailInput!): Account! @join__field(graph: ACCOUNTS)
  updateLayout(updateLayoutInput: UpdateLayoutInput!): Layout! @join__field(graph: MAILER)
  updateUser(updateUserInput: UpdateUserInput!): User! @join__field(graph: USERS)
  verifyEmail(verifyEmailInput: VerifyEmailInput!): Account! @join__field(graph: ACCOUNTS)
}

scalar ObjectID

enum OperatorFieldConfigEnum {
  AND
  OR
}

input Pagination {
  createdAt: DateTime
  limit: Int
  reverse: Boolean
}

type Query {
  getAccounts(getAccountsInput: GetAccountsInput!): GetAccountsResponse! @join__field(graph: ACCOUNTS)
  getCompositionDetails: [CompositionDetail]! @join__field(graph: MAILER)
  getContents(getContentsInput: GetContentsInput!): GetContentsResponse! @join__field(graph: MAILER)
  getLayouts(getLayoutsInput: GetLayoutsInput!): GetLayoutsResponse! @join__field(graph: MAILER)
  getMedia(getMediaInput: GetMediaInput!): GetMediaResponse! @join__field(graph: MEIDA)
  getMyAccount: Account! @join__field(graph: ACCOUNTS)
  getUsers(getUsersInput: GetUsersInput!): GetUsersResponse! @join__field(graph: USERS)
  isAuthenticated: Boolean! @join__field(graph: ACCOUNTS)
  me: User! @join__field(graph: USERS)
}

input RegisterInput {
  email: String!
  password: String!
  password2: String!
}

input ResetCodeInput {
  email: String!
}

input ResetPasswordInput {
  code: String!
  email: String!
  password: String!
  password2: String!
}

input SingleFileUploadInput {
  file: Upload!
  title: String!
}

type Stats {
  cursor: DateTime
  page: Int
  remaining: Int
  total: Int
}

input StringArrayFilter {
  arrayOptions: ArrayFilterByEnum!
  filterBy: StringFilterByEnum!
  string: [String!]!
}

input StringFieldFilter {
  filterBy: StringFilterByEnum!
  string: String!
}

enum StringFilterByEnum {
  MATCH
  OBJECTID
  REGEX
}

input UpdateContentInput {
  _id: ObjectID!
  active: Boolean
  html: String
  layout: ObjectID
  name: String
  plainText: String
  subject: String
  trigger: String
  variables: [String]
}

input UpdateEmailInput {
  email: String!
}

input UpdateLayoutInput {
  _id: ObjectID!
  html: String
  name: String
}

input UpdateUserInput {
  _id: ObjectID!
  account: ObjectID
  address: AddressInput
  email: String
  first_name: String
  image: ObjectID
  last_name: String
  phone: String
  profile_img: ObjectID
  role: Int
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User
  @join__owner(graph: USERS)
  @join__type(graph: USERS, key: "_id")
  @join__type(graph: USERS, key: "account")
  @join__type(graph: MEIDA, key: "_id")
{
  _id: ObjectID! @join__field(graph: USERS)
  account: Account! @join__field(graph: USERS)
  address: Address @join__field(graph: USERS)
  createdAt: DateTime! @join__field(graph: USERS)
  created_by: User @join__field(graph: USERS)
  email: String! @join__field(graph: USERS)
  first_name: String @join__field(graph: USERS)
  image: Media @join__field(graph: USERS)
  last_name: String @join__field(graph: USERS)
  password: String @join__field(graph: USERS)
  phone: String @join__field(graph: USERS)
  role: Int! @join__field(graph: USERS)
  stripe_connected_account_id: String @join__field(graph: USERS)
  stripe_customer_id: String @join__field(graph: USERS)
  updatedAt: DateTime! @join__field(graph: USERS)
}

input VerifyEmailInput {
  code: String!
  email: String!
}

type VerifyEmailResponse {
  message: String!
}

enum core__Purpose {
  """
  `EXECUTION` features provide metadata necessary to for operation execution.
  """
  EXECUTION

  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY
}

scalar join__FieldSet

enum join__Graph {
  ACCOUNTS @join__graph(name: "accounts" url: "http://localhost:5001")
  MAILER @join__graph(name: "mailer" url: "http://mailer:5008/graphql")
  MEIDA @join__graph(name: "meida" url: "http://localhost:5006/graphql")
  USERS @join__graph(name: "users" url: "http://localhost:5002")
}
